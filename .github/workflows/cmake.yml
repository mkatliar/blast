name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install APT packages
      run: |
        sudo apt-get update
        sudo apt install clang-16 libboost-exception-dev libbenchmark-dev -y

    # - name: Install LLVM and Clang 18
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y wget gnupg lsb-release
    #     wget https://apt.llvm.org/llvm.sh
    #     chmod +x llvm.sh
    #     sudo ./llvm.sh 18

    - name: Install Blaze
      run: |
        git clone https://bitbucket.org/blaze-lib/blaze.git
        cd blaze \
        && cmake \
        -DBLAZE_BLAS_MODE=True \
        -DBLAZE_BLAS_USE_MATRIX_MATRIX_MULTIPLICATION=False \
        -DBLAZE_BLAS_USE_MATRIX_VECTOR_MULTIPLICATION=False \
        -DBLAZE_VECTORIZATION=True \
        -DBLAZE_SHARED_MEMORY_PARALLELIZATION=False \
        -DCMAKE_INSTALL_PREFIX=/usr/local/ . \
        && sudo make install

    - name: Install xsimd
      run: |
        git clone https://github.com/xtensor-stack/xsimd.git
        cd xsimd
        cmake -B build -DCMAKE_INSTALL_PREFIX=/usr/local/ .
        sudo cmake --build build --target install

    - name: Install GTest
      run: |
        git clone https://github.com/google/googletest.git
        cd googletest && cmake -DCMAKE_BUILD_TYPE=Release . && sudo make -j `nproc` install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build \
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        -DCMAKE_CXX_COMPILER=clang++-16 \
        -DBLAST_WITH_BENCHMARK=ON \
        -DBLAST_WITH_TEST=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j `nproc`

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
